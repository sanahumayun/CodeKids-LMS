{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IST\\\\Desktop\\\\Spring 2025\\\\SE\\\\Project\\\\SE_Project_42\\\\Project\\\\client\\\\src\\\\components\\\\ChatSidebar.js\",\n  _s = $RefreshSig$();\n// // client/src/components/ChatSidebar.js\n// import React from 'react';\n// import { useChatContext } from '../context/ChatContext';\n// import './ChatSidebar.css';\n\n// const ChatSidebar = ({ onConversationSelect }) => {\n//   const { \n//     currentUser, \n//     conversations, \n//     activeUsers, \n//     selectedConversation, \n//     selectConversation \n//   } = useChatContext();\n\n//   // Get online status for each conversation\n//   const getOnlineStatus = (userId) => {\n//     return activeUsers.some(user => user.userId === userId);\n//   };\n\n//   // Format timestamp\n//   const formatTime = (timestamp) => {\n//     const date = new Date(timestamp);\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//   };\n\n//   // Handle conversation selection\n//   const handleSelect = (conversation) => {\n//     selectConversation(conversation);\n//     if (onConversationSelect) {\n//       onConversationSelect();\n//     }\n//   };\n\n//   return (\n//     <div className=\"chat-sidebar\">\n//       <div className=\"sidebar-header\">\n//         <h2>Conversations</h2>\n//         <div className=\"user-info\">\n//           <span>{currentUser.name}</span>\n//           <span className=\"user-type\">{currentUser.userType}</span>\n//         </div>\n//       </div>\n\n//       <div className=\"conversation-list\">\n//         {conversations.length === 0 ? (\n//           <div className=\"no-conversations\">\n//             <p>No conversations yet</p>\n//           </div>\n//         ) : (\n//           conversations.map((conversation) => (\n//             <div \n//               key={conversation.userId}\n//               className={`conversation-item ${selectedConversation?.userId === conversation.userId ? 'active' : ''}`}\n//               onClick={() => handleSelect(conversation)}\n//             >\n//               <div className=\"conversation-avatar\">\n//                 <div className={`status-indicator ${getOnlineStatus(conversation.userId) ? 'online' : 'offline'}`}></div>\n//                 <span>{conversation.name.substring(0, 2).toUpperCase()}</span>\n//               </div>\n//               <div className=\"conversation-details\">\n//                 <div className=\"conversation-name\">\n//                   {conversation.name}\n//                 </div>\n//                 <div className=\"conversation-last-message\">\n//                   {conversation.lastMessage}\n//                 </div>\n//               </div>\n//               <div className=\"conversation-time\">\n//                 {formatTime(conversation.timestamp)}\n//               </div>\n//             </div>\n//           ))\n//         )}\n//       </div>\n\n//       <div className=\"active-users-section\">\n//         <h3>Online Users</h3>\n//         <div className=\"active-users-list\">\n//           {activeUsers\n//             .filter(user => user.userId !== currentUser.userId)\n//             .map((user) => {\n//               // Check if this user is already in conversations\n//               const existingConversation = conversations.find(conv => conv.userId === user.userId);\n\n//               return (\n//                 <div \n//                   key={user.userId}\n//                   className=\"active-user-item\"\n//                   onClick={() => {\n//                     if (existingConversation) {\n//                       handleSelect(existingConversation);\n//                     } else {\n//                       // Create a new conversation if this is a new contact\n//                       const newConversation = {\n//                         userId: user.userId,\n//                         name: user.name,\n//                         lastMessage: '',\n//                         timestamp: new Date().toISOString()\n//                       };\n//                       handleSelect(newConversation);\n//                     }\n//                   }}\n//                 >\n//                   <div className=\"user-avatar\">\n//                     <div className=\"status-indicator online\"></div>\n//                     <span>{user.name.substring(0, 2).toUpperCase()}</span>\n//                   </div>\n//                   <div className=\"user-details\">\n//                     <div className=\"user-name\">{user.name}</div>\n//                     <div className=\"user-role\">{user.userType}</div>\n//                   </div>\n//                 </div>\n//               );\n//             })}\n\n//           {activeUsers.filter(user => user.userId !== currentUser.userId).length === 0 && (\n//             <div className=\"no-active-users\">\n//               <p>No users online</p>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatSidebar;\n\n// client/src/components/ChatSidebar.js\nimport React from 'react';\nimport { useChatContext } from '../../src/ChatContext';\nimport './ChatSidebar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatSidebar = ({\n  onConversationSelect\n}) => {\n  _s();\n  const {\n    currentUser,\n    conversations,\n    activeUsers,\n    selectedConversation,\n    selectConversation\n  } = useChatContext();\n  const getOnlineStatus = userId => {\n    return activeUsers.some(user => user.userId === userId);\n  };\n  const formatTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const handleSelect = conversation => {\n    selectConversation(conversation);\n    if (onConversationSelect) {\n      onConversationSelect();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: currentUser.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"user-type\",\n          children: currentUser.userType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-list\",\n      children: conversations.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-conversations\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No conversations yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this) : conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `conversation-item ${(selectedConversation === null || selectedConversation === void 0 ? void 0 : selectedConversation.userId) === conversation.userId ? 'active' : ''}`,\n        onClick: () => handleSelect(conversation),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-avatar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `status-indicator ${getOnlineStatus(conversation.userId) ? 'online' : 'offline'}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: conversation.name.substring(0, 2).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-name\",\n            children: conversation.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-last-message\",\n            children: conversation.lastMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversation-time\",\n          children: formatTime(conversation.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this)]\n      }, conversation.userId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"active-users-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Online Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-users-list\",\n        children: [activeUsers.filter(user => user.userId !== currentUser.userId).map(user => {\n          const existingConversation = conversations.find(conv => conv.userId === user.userId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"active-user-item\",\n            onClick: () => {\n              if (existingConversation) {\n                handleSelect(existingConversation);\n              } else {\n                const newConversation = {\n                  userId: user.userId,\n                  name: user.name,\n                  lastMessage: '',\n                  timestamp: new Date().toISOString()\n                };\n                handleSelect(newConversation);\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-avatar\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-indicator online\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: user.name.substring(0, 2).toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-name\",\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-role\",\n                children: user.userType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this)]\n          }, user.userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this);\n        }), activeUsers.filter(user => user.userId !== currentUser.userId).length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-active-users\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No users online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatSidebar, \"LDBaq5NJByokVBWvmhuPKor8A/M=\", false, function () {\n  return [useChatContext];\n});\n_c = ChatSidebar;\nexport default ChatSidebar;\nvar _c;\n$RefreshReg$(_c, \"ChatSidebar\");","map":{"version":3,"names":["React","useChatContext","jsxDEV","_jsxDEV","ChatSidebar","onConversationSelect","_s","currentUser","conversations","activeUsers","selectedConversation","selectConversation","getOnlineStatus","userId","some","user","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","handleSelect","conversation","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","userType","length","map","onClick","substring","toUpperCase","lastMessage","filter","existingConversation","find","conv","newConversation","toISOString","_c","$RefreshReg$"],"sources":["C:/Users/IST/Desktop/Spring 2025/SE/Project/SE_Project_42/Project/client/src/components/ChatSidebar.js"],"sourcesContent":["// // client/src/components/ChatSidebar.js\r\n// import React from 'react';\r\n// import { useChatContext } from '../context/ChatContext';\r\n// import './ChatSidebar.css';\r\n\r\n// const ChatSidebar = ({ onConversationSelect }) => {\r\n//   const { \r\n//     currentUser, \r\n//     conversations, \r\n//     activeUsers, \r\n//     selectedConversation, \r\n//     selectConversation \r\n//   } = useChatContext();\r\n\r\n//   // Get online status for each conversation\r\n//   const getOnlineStatus = (userId) => {\r\n//     return activeUsers.some(user => user.userId === userId);\r\n//   };\r\n\r\n//   // Format timestamp\r\n//   const formatTime = (timestamp) => {\r\n//     const date = new Date(timestamp);\r\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n//   };\r\n\r\n//   // Handle conversation selection\r\n//   const handleSelect = (conversation) => {\r\n//     selectConversation(conversation);\r\n//     if (onConversationSelect) {\r\n//       onConversationSelect();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"chat-sidebar\">\r\n//       <div className=\"sidebar-header\">\r\n//         <h2>Conversations</h2>\r\n//         <div className=\"user-info\">\r\n//           <span>{currentUser.name}</span>\r\n//           <span className=\"user-type\">{currentUser.userType}</span>\r\n//         </div>\r\n//       </div>\r\n      \r\n//       <div className=\"conversation-list\">\r\n//         {conversations.length === 0 ? (\r\n//           <div className=\"no-conversations\">\r\n//             <p>No conversations yet</p>\r\n//           </div>\r\n//         ) : (\r\n//           conversations.map((conversation) => (\r\n//             <div \r\n//               key={conversation.userId}\r\n//               className={`conversation-item ${selectedConversation?.userId === conversation.userId ? 'active' : ''}`}\r\n//               onClick={() => handleSelect(conversation)}\r\n//             >\r\n//               <div className=\"conversation-avatar\">\r\n//                 <div className={`status-indicator ${getOnlineStatus(conversation.userId) ? 'online' : 'offline'}`}></div>\r\n//                 <span>{conversation.name.substring(0, 2).toUpperCase()}</span>\r\n//               </div>\r\n//               <div className=\"conversation-details\">\r\n//                 <div className=\"conversation-name\">\r\n//                   {conversation.name}\r\n//                 </div>\r\n//                 <div className=\"conversation-last-message\">\r\n//                   {conversation.lastMessage}\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"conversation-time\">\r\n//                 {formatTime(conversation.timestamp)}\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         )}\r\n//       </div>\r\n      \r\n//       <div className=\"active-users-section\">\r\n//         <h3>Online Users</h3>\r\n//         <div className=\"active-users-list\">\r\n//           {activeUsers\r\n//             .filter(user => user.userId !== currentUser.userId)\r\n//             .map((user) => {\r\n//               // Check if this user is already in conversations\r\n//               const existingConversation = conversations.find(conv => conv.userId === user.userId);\r\n              \r\n//               return (\r\n//                 <div \r\n//                   key={user.userId}\r\n//                   className=\"active-user-item\"\r\n//                   onClick={() => {\r\n//                     if (existingConversation) {\r\n//                       handleSelect(existingConversation);\r\n//                     } else {\r\n//                       // Create a new conversation if this is a new contact\r\n//                       const newConversation = {\r\n//                         userId: user.userId,\r\n//                         name: user.name,\r\n//                         lastMessage: '',\r\n//                         timestamp: new Date().toISOString()\r\n//                       };\r\n//                       handleSelect(newConversation);\r\n//                     }\r\n//                   }}\r\n//                 >\r\n//                   <div className=\"user-avatar\">\r\n//                     <div className=\"status-indicator online\"></div>\r\n//                     <span>{user.name.substring(0, 2).toUpperCase()}</span>\r\n//                   </div>\r\n//                   <div className=\"user-details\">\r\n//                     <div className=\"user-name\">{user.name}</div>\r\n//                     <div className=\"user-role\">{user.userType}</div>\r\n//                   </div>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n            \r\n//           {activeUsers.filter(user => user.userId !== currentUser.userId).length === 0 && (\r\n//             <div className=\"no-active-users\">\r\n//               <p>No users online</p>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatSidebar;\r\n\r\n// client/src/components/ChatSidebar.js\r\nimport React from 'react';\r\nimport { useChatContext } from '../../src/ChatContext';\r\nimport './ChatSidebar.css';\r\n\r\nconst ChatSidebar = ({ onConversationSelect }) => {\r\n  const { \r\n    currentUser, \r\n    conversations, \r\n    activeUsers, \r\n    selectedConversation, \r\n    selectConversation \r\n  } = useChatContext();\r\n\r\n  const getOnlineStatus = (userId) => {\r\n    return activeUsers.some(user => user.userId === userId);\r\n  };\r\n\r\n  const formatTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n\r\n  const handleSelect = (conversation) => {\r\n    selectConversation(conversation);\r\n    if (onConversationSelect) {\r\n      onConversationSelect();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-sidebar\">\r\n      <div className=\"sidebar-header\">\r\n        <h2>Conversations</h2>\r\n        <div className=\"user-info\">\r\n          <span>{currentUser.name}</span>\r\n          <span className=\"user-type\">{currentUser.userType}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"conversation-list\">\r\n        {conversations.length === 0 ? (\r\n          <div className=\"no-conversations\">\r\n            <p>No conversations yet</p>\r\n          </div>\r\n        ) : (\r\n          conversations.map((conversation) => (\r\n            <div \r\n              key={conversation.userId}\r\n              className={`conversation-item ${selectedConversation?.userId === conversation.userId ? 'active' : ''}`}\r\n              onClick={() => handleSelect(conversation)}\r\n            >\r\n              <div className=\"conversation-avatar\">\r\n                <div className={`status-indicator ${getOnlineStatus(conversation.userId) ? 'online' : 'offline'}`}></div>\r\n                <span>{conversation.name.substring(0, 2).toUpperCase()}</span>\r\n              </div>\r\n              <div className=\"conversation-details\">\r\n                <div className=\"conversation-name\">\r\n                  {conversation.name}\r\n                </div>\r\n                <div className=\"conversation-last-message\">\r\n                  {conversation.lastMessage}\r\n                </div>\r\n              </div>\r\n              <div className=\"conversation-time\">\r\n                {formatTime(conversation.timestamp)}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"active-users-section\">\r\n        <h3>Online Users</h3>\r\n        <div className=\"active-users-list\">\r\n          {activeUsers\r\n            .filter(user => user.userId !== currentUser.userId)\r\n            .map((user) => {\r\n              \r\n              const existingConversation = conversations.find(conv => conv.userId === user.userId);\r\n              \r\n              return (\r\n                <div \r\n                  key={user.userId}\r\n                  className=\"active-user-item\"\r\n                  onClick={() => {\r\n                    if (existingConversation) {\r\n                      handleSelect(existingConversation);\r\n                    } else {\r\n                      const newConversation = {\r\n                        userId: user.userId,\r\n                        name: user.name,\r\n                        lastMessage: '',\r\n                        timestamp: new Date().toISOString()\r\n                      };\r\n                      handleSelect(newConversation);\r\n                    }\r\n                  }}\r\n                >\r\n                  <div className=\"user-avatar\">\r\n                    <div className=\"status-indicator online\"></div>\r\n                    <span>{user.name.substring(0, 2).toUpperCase()}</span>\r\n                  </div>\r\n                  <div className=\"user-details\">\r\n                    <div className=\"user-name\">{user.name}</div>\r\n                    <div className=\"user-role\">{user.userType}</div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n            \r\n          {activeUsers.filter(user => user.userId !== currentUser.userId).length === 0 && (\r\n            <div className=\"no-active-users\">\r\n              <p>No users online</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatSidebar;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAqB,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM;IACJC,WAAW;IACXC,aAAa;IACbC,WAAW;IACXC,oBAAoB;IACpBC;EACF,CAAC,GAAGV,cAAc,CAAC,CAAC;EAEpB,MAAMW,eAAe,GAAIC,MAAM,IAAK;IAClC,OAAOJ,WAAW,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACF,MAAM,KAAKA,MAAM,CAAC;EACzD,CAAC;EAED,MAAMG,UAAU,GAAIC,SAAS,IAAK;IAChC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IAChC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC,CAAC;EAC5E,CAAC;EAGD,MAAMC,YAAY,GAAIC,YAAY,IAAK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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}