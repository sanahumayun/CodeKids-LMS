{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\IST\\\\Desktop\\\\Spring 2025\\\\SE\\\\Project\\\\SE_Project_42\\\\Project\\\\client\\\\src\\\\pages\\\\Chat\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\n// // client/src/components/ChatWindow.js\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useChatContext } from '../context/ChatContext';\n// import './ChatWindow.css';\n\n// const ChatWindow = ({ onBackClick, showBackButton }) => {\n//   const { \n//     currentUser, \n//     selectedConversation, \n//     messages, \n//     sendMessage, \n//     sendTypingIndicator,\n//     isTyping \n//   } = useChatContext();\n\n//   const [message, setMessage] = useState('');\n//   const [typingTimeout, setTypingTimeout] = useState(null);\n//   const messagesEndRef = useRef(null);\n\n//   // Scroll to bottom of messages on new message\n//   useEffect(() => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   }, [messages]);\n\n//   // Handle sending message\n//   const handleSendMessage = (e) => {\n//     e.preventDefault();\n\n//     if (!message.trim() || !selectedConversation) return;\n\n//     sendMessage(message, selectedConversation.userId);\n//     setMessage('');\n\n//     // Clear typing indicator\n//     sendTypingIndicator(false, selectedConversation.userId);\n//   };\n\n//   // Handle typing indicator\n//   const handleTyping = (e) => {\n//     setMessage(e.target.value);\n\n//     if (!selectedConversation) return;\n\n//     // Clear existing timeout\n//     if (typingTimeout) {\n//       clearTimeout(typingTimeout);\n//     }\n\n//     // Send typing indicator\n//     sendTypingIndicator(true, selectedConversation.userId);\n\n//     // Set timeout to clear typing indicator after 2 seconds of no typing\n//     const timeout = setTimeout(() => {\n//       sendTypingIndicator(false, selectedConversation.userId);\n//     }, 2000);\n\n//     setTypingTimeout(timeout);\n//   };\n\n//   // Format timestamp\n//   const formatTime = (timestamp) => {\n//     const date = new Date(timestamp);\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//   };\n\n//   if (!selectedConversation) {\n//     return (\n//       <div className=\"empty-chat-window\">\n//         <div className=\"empty-state\">\n//           <p>Select a conversation to start chatting</p>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"chat-window\">\n//       <div className=\"chat-header\">\n//         {showBackButton && (\n//           <button className=\"back-button\" onClick={onBackClick}>\n//             &larr;\n//           </button>\n//         )}\n//         <div className=\"recipient-info\">\n//           <h3>{selectedConversation.name}</h3>\n//         </div>\n//       </div>\n\n//       <div className=\"messages-container\">\n//         {messages.length === 0 ? (\n//           <div className=\"no-messages\">\n//             <p>No messages yet. Say hello!</p>\n//           </div>\n//         ) : (\n//           messages.map((msg, index) => {\n//             const isOwnMessage = msg.from === currentUser.userId;\n\n//             return (\n//               <div \n//                 key={index} \n//                 className={`message ${isOwnMessage ? 'own-message' : 'other-message'}`}\n//               >\n//                 <div className=\"message-content\">\n//                   {msg.content}\n//                 </div>\n//                 <div className=\"message-meta\">\n//                   {formatTime(msg.timestamp)}\n//                 </div>\n//               </div>\n//             );\n//           })\n//         )}\n\n//         {isTyping[selectedConversation.userId] && (\n//           <div className=\"typing-indicator\">\n//             <span>{isTyping[selectedConversation.userId]} is typing...</span>\n//           </div>\n//         )}\n\n//         <div ref={messagesEndRef} />\n//       </div>\n\n//       <form className=\"message-input-form\" onSubmit={handleSendMessage}>\n//         <input\n//           type=\"text\"\n//           value={message}\n//           onChange={handleTyping}\n//           placeholder=\"Type a message...\"\n//           className=\"message-input\"\n//         />\n//         <button type=\"submit\" className=\"send-button\">\n//           Send\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default ChatWindow;\n\n// client/src/components/ChatWindow.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useChatContext } from '../../ChatContext';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  onBackClick,\n  showBackButton\n}) => {\n  _s();\n  const {\n    currentUser,\n    selectedConversation,\n    messages,\n    sendMessage,\n    sendTypingIndicator,\n    isTyping\n  } = useChatContext();\n  const [message, setMessage] = useState('');\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Scroll to bottom of messages on new message\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Handle sending message\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (!message.trim() || !selectedConversation) return;\n    sendMessage(message, selectedConversation.userId);\n    setMessage('');\n\n    // Clear typing indicator\n    sendTypingIndicator(false, selectedConversation.userId);\n  };\n\n  // Handle typing indicator\n  const handleTyping = e => {\n    setMessage(e.target.value);\n    if (!selectedConversation) return;\n\n    // Clear existing timeout\n    if (typingTimeout) {\n      clearTimeout(typingTimeout);\n    }\n\n    // Send typing indicator\n    sendTypingIndicator(true, selectedConversation.userId);\n\n    // Set timeout to clear typing indicator after 2 seconds of no typing\n    const timeout = setTimeout(() => {\n      sendTypingIndicator(false, selectedConversation.userId);\n    }, 2000);\n    setTypingTimeout(timeout);\n  };\n\n  // Format timestamp\n  const formatTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  if (!selectedConversation) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-chat-window\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a conversation to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [showBackButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: onBackClick,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipient-info\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedConversation.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-messages\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet. Say hello!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this) : messages.map((msg, index) => {\n        const isOwnMessage = msg.from === currentUser.userId;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${isOwnMessage ? 'own-message' : 'other-message'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-meta\",\n            children: formatTime(msg.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this);\n      }), isTyping[selectedConversation.userId] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [isTyping[selectedConversation.userId], \" is typing...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-input-form\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: handleTyping,\n        placeholder: \"Type a message...\",\n        className: \"message-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"dVYIwMSndpRE3Ycmh24BVYzplUo=\", false, function () {\n  return [useChatContext];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useChatContext","jsxDEV","_jsxDEV","ChatWindow","onBackClick","showBackButton","_s","currentUser","selectedConversation","messages","sendMessage","sendTypingIndicator","isTyping","message","setMessage","typingTimeout","setTypingTimeout","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","userId","handleTyping","target","value","clearTimeout","timeout","setTimeout","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","length","map","msg","index","isOwnMessage","from","content","ref","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/IST/Desktop/Spring 2025/SE/Project/SE_Project_42/Project/client/src/pages/Chat/ChatWindow.js"],"sourcesContent":["// // client/src/components/ChatWindow.js\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useChatContext } from '../context/ChatContext';\r\n// import './ChatWindow.css';\r\n\r\n// const ChatWindow = ({ onBackClick, showBackButton }) => {\r\n//   const { \r\n//     currentUser, \r\n//     selectedConversation, \r\n//     messages, \r\n//     sendMessage, \r\n//     sendTypingIndicator,\r\n//     isTyping \r\n//   } = useChatContext();\r\n  \r\n//   const [message, setMessage] = useState('');\r\n//   const [typingTimeout, setTypingTimeout] = useState(null);\r\n//   const messagesEndRef = useRef(null);\r\n\r\n//   // Scroll to bottom of messages on new message\r\n//   useEffect(() => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   }, [messages]);\r\n\r\n//   // Handle sending message\r\n//   const handleSendMessage = (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     if (!message.trim() || !selectedConversation) return;\r\n    \r\n//     sendMessage(message, selectedConversation.userId);\r\n//     setMessage('');\r\n    \r\n//     // Clear typing indicator\r\n//     sendTypingIndicator(false, selectedConversation.userId);\r\n//   };\r\n\r\n//   // Handle typing indicator\r\n//   const handleTyping = (e) => {\r\n//     setMessage(e.target.value);\r\n    \r\n//     if (!selectedConversation) return;\r\n    \r\n//     // Clear existing timeout\r\n//     if (typingTimeout) {\r\n//       clearTimeout(typingTimeout);\r\n//     }\r\n    \r\n//     // Send typing indicator\r\n//     sendTypingIndicator(true, selectedConversation.userId);\r\n    \r\n//     // Set timeout to clear typing indicator after 2 seconds of no typing\r\n//     const timeout = setTimeout(() => {\r\n//       sendTypingIndicator(false, selectedConversation.userId);\r\n//     }, 2000);\r\n    \r\n//     setTypingTimeout(timeout);\r\n//   };\r\n\r\n//   // Format timestamp\r\n//   const formatTime = (timestamp) => {\r\n//     const date = new Date(timestamp);\r\n//     return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n//   };\r\n\r\n//   if (!selectedConversation) {\r\n//     return (\r\n//       <div className=\"empty-chat-window\">\r\n//         <div className=\"empty-state\">\r\n//           <p>Select a conversation to start chatting</p>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"chat-window\">\r\n//       <div className=\"chat-header\">\r\n//         {showBackButton && (\r\n//           <button className=\"back-button\" onClick={onBackClick}>\r\n//             &larr;\r\n//           </button>\r\n//         )}\r\n//         <div className=\"recipient-info\">\r\n//           <h3>{selectedConversation.name}</h3>\r\n//         </div>\r\n//       </div>\r\n      \r\n//       <div className=\"messages-container\">\r\n//         {messages.length === 0 ? (\r\n//           <div className=\"no-messages\">\r\n//             <p>No messages yet. Say hello!</p>\r\n//           </div>\r\n//         ) : (\r\n//           messages.map((msg, index) => {\r\n//             const isOwnMessage = msg.from === currentUser.userId;\r\n            \r\n//             return (\r\n//               <div \r\n//                 key={index} \r\n//                 className={`message ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n//               >\r\n//                 <div className=\"message-content\">\r\n//                   {msg.content}\r\n//                 </div>\r\n//                 <div className=\"message-meta\">\r\n//                   {formatTime(msg.timestamp)}\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//           })\r\n//         )}\r\n        \r\n//         {isTyping[selectedConversation.userId] && (\r\n//           <div className=\"typing-indicator\">\r\n//             <span>{isTyping[selectedConversation.userId]} is typing...</span>\r\n//           </div>\r\n//         )}\r\n        \r\n//         <div ref={messagesEndRef} />\r\n//       </div>\r\n      \r\n//       <form className=\"message-input-form\" onSubmit={handleSendMessage}>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={message}\r\n//           onChange={handleTyping}\r\n//           placeholder=\"Type a message...\"\r\n//           className=\"message-input\"\r\n//         />\r\n//         <button type=\"submit\" className=\"send-button\">\r\n//           Send\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// export default ChatWindow;\r\n\r\n\r\n// client/src/components/ChatWindow.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useChatContext } from '../../ChatContext';\r\nimport './ChatWindow.css';\r\n\r\nconst ChatWindow = ({ onBackClick, showBackButton }) => {\r\n  const { \r\n    currentUser, \r\n    selectedConversation, \r\n    messages, \r\n    sendMessage, \r\n    sendTypingIndicator,\r\n    isTyping \r\n  } = useChatContext();\r\n  \r\n  const [message, setMessage] = useState('');\r\n  const [typingTimeout, setTypingTimeout] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll to bottom of messages on new message\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Handle sending message\r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!message.trim() || !selectedConversation) return;\r\n    \r\n    sendMessage(message, selectedConversation.userId);\r\n    setMessage('');\r\n    \r\n    // Clear typing indicator\r\n    sendTypingIndicator(false, selectedConversation.userId);\r\n  };\r\n\r\n  // Handle typing indicator\r\n  const handleTyping = (e) => {\r\n    setMessage(e.target.value);\r\n    \r\n    if (!selectedConversation) return;\r\n    \r\n    // Clear existing timeout\r\n    if (typingTimeout) {\r\n      clearTimeout(typingTimeout);\r\n    }\r\n    \r\n    // Send typing indicator\r\n    sendTypingIndicator(true, selectedConversation.userId);\r\n    \r\n    // Set timeout to clear typing indicator after 2 seconds of no typing\r\n    const timeout = setTimeout(() => {\r\n      sendTypingIndicator(false, selectedConversation.userId);\r\n    }, 2000);\r\n    \r\n    setTypingTimeout(timeout);\r\n  };\r\n\r\n  // Format timestamp\r\n  const formatTime = (timestamp) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  };\r\n\r\n  if (!selectedConversation) {\r\n    return (\r\n      <div className=\"empty-chat-window\">\r\n        <div className=\"empty-state\">\r\n          <p>Select a conversation to start chatting</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-header\">\r\n        {showBackButton && (\r\n          <button className=\"back-button\" onClick={onBackClick}>\r\n            &larr;\r\n          </button>\r\n        )}\r\n        <div className=\"recipient-info\">\r\n          <h3>{selectedConversation.name}</h3>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"messages-container\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"no-messages\">\r\n            <p>No messages yet. Say hello!</p>\r\n          </div>\r\n        ) : (\r\n          messages.map((msg, index) => {\r\n            const isOwnMessage = msg.from === currentUser.userId;\r\n            \r\n            return (\r\n              <div \r\n                key={index} \r\n                className={`message ${isOwnMessage ? 'own-message' : 'other-message'}`}\r\n              >\r\n                <div className=\"message-content\">\r\n                  {msg.content}\r\n                </div>\r\n                <div className=\"message-meta\">\r\n                  {formatTime(msg.timestamp)}\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n        \r\n        {isTyping[selectedConversation.userId] && (\r\n          <div className=\"typing-indicator\">\r\n            <span>{isTyping[selectedConversation.userId]} is typing...</span>\r\n          </div>\r\n        )}\r\n        \r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n      <form className=\"message-input-form\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={handleTyping}\r\n          placeholder=\"Type a message...\"\r\n          className=\"message-input\"\r\n        />\r\n        <button type=\"submit\" className=\"send-button\">\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}